variables:
 - name: project_name
   value: Tobor

trigger:
  branches:
    include:
    - '*' # ' or " ? https://stackoverflow.com/questions/19109912/yaml-do-i-need-quotes-for-strings-in-yaml
    exclude:
    - artifacts

stages:

 - stage: Compile_and_Test
   dependsOn: []
   
   jobs:
    - job: Qt_5
      strategy:
        matrix:
          ubuntu_22_04:
            imageName: "ubuntu-22.04"
            the_name: "Azure Pipelines"
      
          ubuntu_20_04:
            imageName: "ubuntu-20.04"
            the_name: "Azure Pipelines"
      
          mac_12:
            imageName: "macos-12"
            the_name: "Azure Pipelines"
      
          mac_11:
            imageName: "macos-11"
            the_name: "Azure Pipelines"
      
          windows_2022:
            imageName: "windows-2022"
            the_name: "Azure Pipelines"
      
          windows_2019:
            imageName: "windows-2019"
            the_name: "Azure Pipelines"
      
      pool:
        vmImage: $(imageName)
        name: $(the_name)
      
      steps:
       - script: sudo apt-get update && sudo apt-get install qtbase5-dev libqt5svg5-dev
         displayName: "Install Qt (Linux)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux'))
       - script: brew install qt@5
         displayName: "Install Qt (Darwin)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Darwin'))
       - script: |
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          pip install aqtinstall
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          aqt list-qt windows desktop
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          mkdir C:\Qt
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          aqt install-qt --outputdir C:\Qt windows desktop 5.15.2 win64_msvc2019_64
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
         displayName: "Install Qt (Windows)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
       - script: git submodule update --init --recursive
         displayName: "Init Git Submodules"
         condition: succeeded()
       - script: cmake -S . -B ./build/ -DCMAKE_PREFIX_PATH="C:\Qt\5.15.2\msvc2019_64" -DUSE_QT6:BOOL=FALSE
         displayName: "CMake: Create Project (Windows)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
       - script: PATH="/usr/local/opt/qt@5/bin:$PATH" && cmake -S . -B ./build/ -DUSE_QT6:BOOL=FALSE
         displayName: "CMake: Create Project (Darwin)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Darwin'))
       - script: cmake -S . -B ./build/ -DUSE_QT6:BOOL=FALSE
         displayName: "CMake: Create Project (Linux)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux'))
       - script: cmake --build ./build --verbose
         displayName: "CMake: Compile and Link"
         condition: succeeded()
       - script: ./build/test/TEST-$(project_name)
         displayName: "Run Tests on Linux / Mac OS"
         condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
       - script: .\build\test\Debug\TEST-$(project_name).exe
         displayName: "Run Tests on Windows"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
    - job: Qt_6
      strategy:
        matrix:
          ubuntu_22_04:
            imageName: "ubuntu-22.04"
            the_name: "Azure Pipelines"
      
          mac_12:
            imageName: "macos-12"
            the_name: "Azure Pipelines"
      
          mac_11:
            imageName: "macos-11"
            the_name: "Azure Pipelines"
      
          windows_2022:
            imageName: "windows-2022"
            the_name: "Azure Pipelines"
      
          windows_2019:
            imageName: "windows-2019"
            the_name: "Azure Pipelines"
      
      pool:
        vmImage: $(imageName)
        name: $(the_name)
      
      steps:
       - script: sudo apt-get update && sudo apt-get install build-essential libgl1-mesa-dev qt6-base-dev libqt6svg6 libqt6svg6-dev
         displayName: "Install Qt (Linux)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Linux'))
       - script: brew install qt@6
         displayName: "Install Qt (Darwin)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Darwin'))
       - script: |
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          pip install aqtinstall
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          aqt list-qt windows desktop
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          mkdir C:\Qt
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
          aqt install-qt --outputdir C:\Qt windows desktop 6.5.1 win64_msvc2019_64
          echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++"
         displayName: "Install Qt (Windows)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
       - script: git submodule update --init --recursive
         displayName: "Init Git Submodules"
         condition: succeeded()
       - script: cmake -S . -B ./build/ -DCMAKE_PREFIX_PATH="C:\Qt\6.5.1\msvc2019_64"
         displayName: "CMake: Create Project (Windows)"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT'))
       - script: cmake -S . -B ./build/
         displayName: "CMake: Create Project (Darwin / Linux)"
         condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
       - script: cmake --build ./build --verbose
         displayName: "CMake: Compile and Link"
         condition: succeeded()
       - script: ./build/test/TEST-$(project_name)
         displayName: "Run Tests on Linux / Mac OS"
         condition: and(succeeded(), ne( variables['Agent.OS'], 'Windows_NT'))
       - script: .\build\test\Debug\TEST-$(project_name).exe
         displayName: "Run Tests on Windows"
         condition: and(succeeded(), eq( variables['Agent.OS'], 'Windows_NT' ))
